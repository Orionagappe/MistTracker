// --- Session and State Management ---
startSession           // Initialize a new user session, set up session variables and state (user, time, etc.)
endSession             // End the current session, persist state to database
onExit                 // Handle unexpected session termination (e.g., window close), persist state
priorState             // Load previous state from persistent storage (e.g., mySQL)
nextState              // Load next state from persistent storage (e.g., mySQL)
captureViewport        // Capture current viewport state and persist to database
persistUpdate          // Save current rendered items (not full user path) to persistent storage
userPath               // Save user navigation path for session tracking

// --- Data Model and CRUD Operations ---
createPrimaryLine      // Initialize the primary (time) line in the database
addCategoryLine        // Add a category line at a specific time index
addItemLine            // Add an item line for a category
loadPrimaryLine        // Load primary line (time indexes) from database
loadCategoriesForTime  // Load categories for a given time index from database
loadItemsForCategory   // Load items for a given category from database
addTimeIndex           // Add a new time index to the primary line
addCategory            // Add a new category for a given time index
addItem                // Add a new item for a given category

// --- Data Integrity and Utilities ---
ensureMistDatabase     // Ensure the mySQL database and required tables exist
updateMistData         // Update database with latest data from external sources (e.g., story files)
loadMistUser           // Load user data from database
getMistDataTables      // Utility: Get references to required tables in the database
getMistTables          // Utility: Get references to main tables in the database
loadWordDefinition     // Load dictionary definition for a word from database

// --- Viewport and UI Logic ---
getMistViewportData    // Provide structured data for the UI (lines, categories, items)
transformStream        // Handle user selections, update session state, and compute nD vectors for lines
saveSessionPath        // Save user navigation path to persistent storage
saveCurrentState       // Save current session state to persistent storage
calculateLineOrientation // Compute orientation of lines for nD arrangement (for GPU or CPU)
getSessionId           // Generate unique session identifier (user + timestamp)
initViewport           // Initialize the viewport with current state and user input
renderViewport         // Render the viewport using current state and visible items (for GPU or CPU)
selectTimeIndex        // Select a time index from the primary line
selectCategory         // Select a category from the categories for the selected time index
selectItem             // Select an item from the items for the selected category
showAddTimeInput       // Show input for adding a new time index
showAddCategoryInput   // Show input for adding a new category
showAddItemInput       // Show input for adding a new item
showInputBox           // Show generic input box for user input
handleSelection        // Handle user selection, update session state, and persist as needed

// --- Advanced Rendering and Navigation ---
hourGlass              // Compute nD orthogonal vectors for line arrangement; project to 2D/3D for display
enableRelativeNavigation // Enable mouse or input-based navigation along any line, relative to parent/plane
cullVisible            // Only show items/lines opened by the user in the current session (use session.opened)
gramSchmidt            // Orthonormalize vectors for nD arrangement (for GPU or CPU)
storyWriter            // Parse and extract structured data from story files (RTF or plain text)

// --- Migration Notes ---
// - Replace all Google Sheets/Drive operations with mySQL queries and file I/O.
// - Replace HTML Service UI with x11 or other native UI toolkit.
// - Use Vulkan/OpenCL for vector math, rendering, and possibly data processing.
// - All session and state persistence should use mySQL or equivalent.
// - All vector and matrix operations should be GPU-accelerated where possible.